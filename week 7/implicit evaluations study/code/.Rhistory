mutate(exclude_amp_number=ifelse(n%%72==0,"include","exclude"))#|>
#select(-n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject")|>
full_join(dataa, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual duplicate cases and determine which of the multiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_selfreport = case_when(is.na(like) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(positive) ~ "exclude",
TRUE ~ "include"))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_number = case_when(is.na(exclude_amp_number) ~ "exclude",
TRUE ~ exclude_amp_number ))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_performance = case_when(is.na(exclude_amp_performance) ~ "exclude",
TRUE ~ exclude_amp_performance ))
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_selfreport== "exclude" ~ "exclude",
exclude_amp_number== "exclude" ~ "exclude",
TRUE ~ "include"))
data_processed
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
data_amp_number_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions")|>
count(subject)|>
mutate(exclude_amp_number=ifelse(n%%72==0,"include","exclude"))|>
select(-n)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
data_amp_number_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions")|>
count(subject)|>
mutate(exclude_amp_number=ifelse(n%%72==0,"include","exclude"))|>
select(-n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject")|>
full_join(data_amp_number_criteria, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual duplicate cases and determine which of the multiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_selfreport = case_when(is.na(like) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(positive) ~ "exclude",
TRUE ~ "include"))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_number = case_when(is.na(exclude_amp_number) ~ "exclude",
TRUE ~ exclude_amp_number ))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_performance = case_when(is.na(exclude_amp_performance) ~ "exclude",
TRUE ~ exclude_amp_performance ))
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_selfreport== "exclude" ~ "exclude",
exclude_amp_number== "exclude" ~ "exclude",
TRUE ~ "include"))
data_processed
#for all-->82 trials
data_amp_number_criteria_all <- data_amp_raw |>
count(subject)#|>
data_amp_number_criteria_all
#for all-->82 trials
data_amp_number_criteria_all <- data_amp_raw |>
count(subject)|>
mutate(exclude_amp_number=ifelse(n%%82==0,"include","exclude"))|>
select(-n)
data_amp_number_criteria_all
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#for the test--> 72 trials
data_amp_number_criteria_testtrial <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions")|>
count(subject)|>
mutate(exclude_amp_number=ifelse(n%%72==0,"include","exclude"))|>
select(-n)
#for all-->82 trials
data_amp_number_criteria_all <- data_amp_raw |>
count(subject)|>
mutate(exclude_amp_number=ifelse(n%%82==0,"include","exclude"))|>
select(-n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject")|>
full_join(data_amp_number_criteria_testtrial, by = "subject")
full_join(data_amp_number_criteria_all,by="subject")
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject")|>
full_join(data_amp_number_criteria_testtrial, by = "subject")|>
full_join(data_amp_number_criteria_all,by="subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual duplicate cases and determine which of the multiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_selfreport = case_when(is.na(like) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(positive) ~ "exclude",
TRUE ~ "include"))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_number = case_when(is.na(exclude_amp_number) ~ "exclude",
TRUE ~ exclude_amp_number ))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#for the test--> 72 trials
data_amp_number_criteria_testtrial <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions")|>
count(subject)|>
mutate(exclude_amp_number=ifelse(n%%72==0,"include","exclude"))|>
select(-n)
#for all-->82 trials
data_amp_number_criteria_all <- data_amp_raw |>
count(subject)|>
mutate(exclude_amp_number=ifelse(n%%82==0,"include","exclude"))|>
select(-n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject")|>
full_join(data_amp_number_criteria_testtrial, by = "subject")|>
full_join(data_amp_number_criteria_all,by="subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual duplicate cases and determine which of the multiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_selfreport = case_when(is.na(like) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(positive) ~ "exclude",
TRUE ~ "include"))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_number_testtrial = case_when(is.na(exclude_amp_number_testtrial) ~ "exclude",
TRUE ~ exclude_amp_number_testtrial ))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#for the test--> 72 trials
data_amp_number_criteria_testtrial <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions")|>
count(subject)|>
mutate(exclude_amp_number_testtrial=ifelse(n%%72==0,"include","exclude"))|>
select(-n)
#for all-->82 trials
data_amp_number_criteria_all <- data_amp_raw |>
count(subject)|>
mutate(exclude_amp_number_all=ifelse(n%%82==0,"include","exclude"))|>
select(-n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject")|>
full_join(data_amp_number_criteria_testtrial, by = "subject")|>
full_join(data_amp_number_criteria_all,by="subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual duplicate cases and determine which of the multiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_selfreport = case_when(is.na(like) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(positive) ~ "exclude",
TRUE ~ "include"))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_number_testtrial = case_when(is.na(exclude_amp_number_testtrial) ~ "exclude",
TRUE ~ exclude_amp_number_testtrial ))
data_processed_before_exclusions <- data_processed_before_exclusions|>
mutate(exclude_amp_performance = case_when(is.na(exclude_amp_performance) ~ "exclude",
TRUE ~ exclude_amp_performance ))
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_selfreport== "exclude" ~ "exclude",
exclude_amp_number== "exclude" ~ "exclude",
TRUE ~ "include"))
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_selfreport== "exclude" ~ "exclude",
exclude_amp_number_testtrial== "exclude" ~ "exclude",
TRUE ~ "include"))
data_processed
#for the test--> 72 trials
data_amp_number_criteria_testtrial <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions")|>
count(subject)|>
mutate(exclude_amp_number_testtrial=ifelse(n%%72==0,"include","exclude"))|>
select(-n)
data_amp_number_criteria_testtrial
data_amp_number_criteria_all
data<-data_processed|>count(exclude_amp_number_all)
data
data<-data_processed|>count(exclude_amp_number_testtrial)
data
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
View(data_amp_performance_criteria)
